//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JohnBPearson.Windows.Forms.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.7.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Glad to have you here! Don\'t hesitate to ask for help. Our discord link is in the" +
            " Guild window \'Description\' (press G).")]
        public string AcceptanceMessage {
            get {
                return ((string)(this["AcceptanceMessage"]));
            }
            set {
                this["AcceptanceMessage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("s")]
        public char UserHotKeyGuildAd {
            get {
                return ((char)(this["UserHotKeyGuildAd"]));
            }
            set {
                this["UserHotKeyGuildAd"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z")]
        public string AllowedHotkeys {
            get {
                return ((string)(this["AllowedHotkeys"]));
            }
            set {
                this["AllowedHotkeys"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("a")]
        public char UserHotkeyAcceptance {
            get {
                return ((char)(this["UserHotkeyAcceptance"]));
            }
            set {
                this["UserHotkeyAcceptance"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Alt + Shift + ")]
        public string HotkeyModifiers {
            get {
                return ((string)(this["HotkeyModifiers"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Max XP + Active (optional) discord. \r\n Chill, friendly, helpful. No requirements/" +
            "alt limits, just be kind/respectful. \r\n Rank + conquest rewards. Social + PvE + " +
            "PvP Events. \r\n Get involved or focus on solo play! Whisper for info/inv.")]
        public string GuildAd {
            get {
                return ((string)(this["GuildAd"]));
            }
            set {
                this["GuildAd"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Test")]
        public string Reminder01 {
            get {
                return ((string)(this["Reminder01"]));
            }
            set {
                this["Reminder01"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int MaximumReminders {
            get {
                return ((int)(this["MaximumReminders"]));
            }
            set {
                this["MaximumReminders"] = value;
            }
        }
    }
}
